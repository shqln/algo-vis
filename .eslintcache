[{"C:\\Users\\Shiqi Lin\\algo\\src\\index.js":"1","C:\\Users\\Shiqi Lin\\algo\\src\\App.js":"2","C:\\Users\\Shiqi Lin\\algo\\src\\main\\AlgorithmVisualiser.jsx":"3","C:\\Users\\Shiqi Lin\\algo\\src\\main\\ArrayController.jsx":"4","C:\\Users\\Shiqi Lin\\documents\\github\\algo-vis\\src\\index.js":"5","C:\\Users\\Shiqi Lin\\documents\\github\\algo-vis\\src\\App.js":"6","C:\\Users\\Shiqi Lin\\documents\\github\\algo-vis\\src\\main\\AlgorithmVisualiser.jsx":"7","C:\\Users\\Shiqi Lin\\documents\\github\\algo-vis\\src\\main\\ArrayController.jsx":"8"},{"size":219,"mtime":1609638407015,"results":"9","hashOfConfig":"10"},{"size":205,"mtime":1609638407002,"results":"11","hashOfConfig":"10"},{"size":10891,"mtime":1611726200696,"results":"12","hashOfConfig":"10"},{"size":2388,"mtime":1611717166802,"results":"13","hashOfConfig":"10"},{"size":219,"mtime":1609638407015,"results":"14","hashOfConfig":"15"},{"size":205,"mtime":1609638407002,"results":"16","hashOfConfig":"15"},{"size":10891,"mtime":1611726200696,"results":"17","hashOfConfig":"15"},{"size":2388,"mtime":1611717166802,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n264h4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"10p3dh",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"C:\\Users\\Shiqi Lin\\algo\\src\\index.js",[],"C:\\Users\\Shiqi Lin\\algo\\src\\App.js",[],"C:\\Users\\Shiqi Lin\\algo\\src\\main\\AlgorithmVisualiser.jsx",["38","39","40","41","42","43"],"C:\\Users\\Shiqi Lin\\algo\\src\\main\\ArrayController.jsx",["44"],"C:\\Users\\Shiqi Lin\\documents\\github\\algo-vis\\src\\index.js",[],["45","46"],"C:\\Users\\Shiqi Lin\\documents\\github\\algo-vis\\src\\App.js",[],"C:\\Users\\Shiqi Lin\\documents\\github\\algo-vis\\src\\main\\AlgorithmVisualiser.jsx",["47","48","49","50","51","52"],"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ArrayController from \"./ArrayController\";\n\n// settings\nconst LEN = 100;\nconst MAX = 500;\nconst MIN = 5;\nconst SPD = 100; // multiplier\nconst DELAY = 1 * (1 / SPD); // ms\n\nconst BAR_COL_DFLT = \"AliceBlue\"; // default colour\nconst BAR_COL_SWAP = \"Orchid\"; // colour when swapping\nconst BAR_COL_COMP = \"LightSalmon\"; // colour when comparing\nconst BAR_COL_CORR = \"SpringGreen\"; // colour when elem is in place\nconst BAR_COL_TEST = \"MistyRose\"; // colour for debugging purpose\n\nclass AlgorithmVisualiser extends React.Component {\n  state = {\n    array: [],\n    animations: [],\n    solution: [],\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ArrayController\n          onReset={this.resetArray}\n          onSort={this.sortArray}\n          onBubbleSort={this.bubbleSort}\n          onMergeSort={this.mergeSort}\n          onTestCss={this.testCss}\n          onTestCss2={this.testCss2}\n          onTest={() =>\n            console.log(this.debugSort(this.mergeSortInPlace, [0, LEN]))\n          }\n        />\n        <div className=\"array-container\">\n          <div\n            className=\"array-container-pillar\"\n            key=\"pillar\"\n            style={{ height: `${MAX}px` }}\n          ></div>\n          {this.state.array.map((num, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ height: `${num}px` }}\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // reset the array when the component is created\n  componentDidMount = () => {\n    this.resetArray();\n  };\n\n  // initialises the array and fill it with random numebers\n  resetArray = () => {\n    const array = this.generateArray();\n    const solution = [...array].sort((a, b) => a - b);\n    this.setState({ array, animations: [], solution });\n    this.drawInPlace();\n  };\n\n  generateArray = () => {\n    const array = [];\n    for (var i = 0; i < LEN; i++) {\n      array.push(this.randIntBetween(MIN, MAX));\n    }\n    return array;\n  };\n\n  // generates an integer between min and max\n  // from stackoverflow\n  //https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n  randIntBetween = (min, max) => {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  // sorts the array ascendingly\n  sortArray = () => {\n    let { array } = this.state;\n    console.log(array);\n    array = array.sort((a, b) => a - b);\n    this.setState({ array });\n    this.drawInPlace();\n  };\n\n  // tests something about the css\n  testCss = () => {\n    this.changeColour(\"MistyRose\");\n  };\n\n  // tests something about the css\n  testCss2 = () => {\n    this.changeColour(BAR_COL_DFLT);\n  };\n\n  /////////////////////////Algorithms////////////////////////////\n\n  // merges two sorted arrays\n  merge = (a, b) => {\n    let i = 0,\n      j = 0,\n      m = a.length,\n      n = b.length,\n      result = [];\n    while (i !== m && j !== n) {\n      if (a[i] > b[j]) {\n        result.push(b[j]);\n        j++;\n      } else {\n        result.push(a[i]);\n        i++;\n      }\n    }\n    if (i !== m) {\n      result = result.concat(a.slice(i, undefined));\n    }\n    if (j !== n) {\n      result = result.concat(b.slice(j, undefined));\n    }\n    return result;\n  };\n\n  // wrapper function for merge sort\n  mergeSort = () => {\n    let { array } = this.state;\n    const arrayCopy = [...array];\n    this.mergeSortInPlace(arrayCopy, 0, arrayCopy.length);\n    this.animate();\n  };\n\n  // sorts an array using merge sort, uses auxiliary array\n  mergeSort_ = (array) => {\n    let n = array.length;\n\n    if (n <= 1) {\n      return array;\n    }\n\n    let mid = Math.floor(n / 2);\n\n    let left = array.slice(undefined, mid),\n      right = array.slice(mid, undefined),\n      sortedLeft = this.mergeSort_(left),\n      sortedRight = this.mergeSort_(right);\n    return this.merge(sortedLeft, sortedRight);\n  };\n\n  // array : [x, x, .....x,| ..... x, x]\n  //         l          mid           r\n  // l, mid and r are INDICES OF THE LAST ELEMENT OF THE TWO SUB ARRAYS\n  // [l...mid] and [mid+1, r] are sorted\n  // [0...l-1] is the merged\n  mergeInPlace = (array, l, mid, r) => {\n    let i = l,\n      j = mid + 1;\n    // console.log(\"merging: \", array.slice(l, mid), array.slice(mid + 1, r + 1));\n    // while there are elems in both unmerged arrays\n    while (i <= mid && j <= r) {\n      // if right is smaller, move all elems from i to j to the right by 1\n      if (this.doCompare(array, i, j, true) === 1) {\n        let k = j;\n        while (k > i) {\n          this.doSwap(array, k, k - 1, true);\n          k--;\n        }\n        // update pointers;\n        mid++;\n        i++;\n        j++;\n      } else {\n        // left < right\n        i++;\n      }\n    }\n    return array;\n  };\n\n  // sorts an array using merge sort, does not use auxiliary array\n  // array : |[x, x, ...... x, x]|\n  //         l                   r\n  mergeSortInPlace = (array, l, r) => {\n    let len = r - l;\n    if (len <= 1) {\n      return array;\n    }\n    let mid = Math.floor((l + r) / 2);\n\n    this.mergeSortInPlace(array, l, mid);\n    this.mergeSortInPlace(array, mid, r);\n\n    return this.mergeInPlace(array, l, mid - 1, r - 1);\n  };\n\n  quickSort = () => {};\n\n  bubbleSort_ = (array) => {\n    let swapped = true;\n    let passes = 0;\n    while (swapped && passes < LEN) {\n      passes++;\n      swapped = false;\n      // for each element, compare with the next\n      for (var i = 0; i < array.length - 1; i++) {\n        let j = i + 1;\n        // if wrong order, swap\n        if (this.doCompare(array, i, j, true) === 1) {\n          this.doSwap(array, i, j, true);\n          swapped = true;\n        }\n      }\n    }\n    if (this.testSorted(array)) {\n    } else {\n    }\n    return array;\n  };\n\n  bubbleSort = () => {\n    let sorted = this.bubbleSort_([...this.state.array]);\n    this.animate();\n  };\n\n  doCompare = (array, i, j, newAnimation) => {\n    if (newAnimation) {\n      this.addCompare(i, j);\n    }\n    let delta = array[i] - array[j];\n    if (delta < 0) {\n      return -1;\n    }\n    if (delta > 0) {\n      return 1;\n    }\n    return 0;\n  };\n\n  // swaps two elements in an array, a b are indices\n  doSwap = (array, i, j, newAnimation) => {\n    if (newAnimation) {\n      this.addSwap(i, j);\n    }\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return array;\n  };\n\n  // checks if the arary is sorted\n  testSorted = (array) => {\n    let copy = [...array];\n    copy.sort((a, b) => a - b);\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] !== copy[i]) {\n        console.log(array[i], \" != \", copy[i], \"at\", i);\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // checks if two arrays contain the exact same things in the same order\n  equalArray = (a, b) => {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // generates 500 arrays based on the setting, see if the arrays sorted by the\n  // native algorithm is the same as sorted by the sortFn\n  debugSort = (sortFn, args) => {\n    const NTEST = 500;\n    for (var i = 0; i < NTEST; i++) {\n      let a = this.generateArray(),\n        b = [...a],\n        nativeSorted = a.sort((a, b) => a - b),\n        customSorted = sortFn(b, ...args);\n      if (this.equalArray(nativeSorted, customSorted)) {\n        console.log(\"sort successful\");\n      } else {\n        return false;\n      }\n    }\n    return true;\n  };\n  /////////////////helpers for visualisation/////////////////////\n  // idea: compute and generate a list of animations before executing the\n  // animations, this way the animations can be played back and even in reverse\n  // format for animation : array of objects each containing one animation\n  // {pointAt: [a], swap: [a, b], compare: [a, b]}\\\n\n  // executes the list of animations\n  animate = () => {\n    let { animations } = this.state;\n    animations.reverse();\n    this.setState({ animations });\n    this.animate_();\n  };\n\n  // recursive\n  animate_ = () => {\n    let { array, animations } = this.state;\n    this.drawInPlace();\n    if (animations.length === 0) {\n      return;\n    }\n    animations.pop().animate(this);\n    setTimeout(() => {\n      this.animate_();\n    }, DELAY);\n  };\n\n  // animation for a pointer\n  animatePointAt = () => {};\n\n  // animation for a swap\n  animateSwap = (a, b) => {\n    let colA = this.getColour(a),\n      colB = this.getColour(b);\n    this.changeColour(BAR_COL_SWAP, [a, b]);\n    this.doSwap(this.state.array, a, b);\n    this.setState(this.state);\n    setTimeout(() => {\n      this.changeColour(colA, [a]);\n      this.changeColour(colB, [b]);\n    }, DELAY);\n  };\n\n  // animation for a comparison\n  animateCompare = (a, b) => {\n    let colA = this.getColour(a),\n      colB = this.getColour(b);\n    this.changeColour(BAR_COL_COMP, [a, b]);\n    setTimeout(() => {\n      this.changeColour(colA, [a]);\n      this.changeColour(colB, [b]);\n    }, DELAY);\n  };\n\n  // adds a pointAt animation\n  addPointAt = (idx) => {\n    this.state.animations.push({ pointAt: [idx] });\n  };\n\n  // adds a swap animation\n  addSwap = (a, b) => {\n    this.state.animations.push({\n      swap: [a, b],\n      animate: (parent) => {\n        parent.animateSwap(a, b);\n      },\n    });\n  };\n\n  // adds a comparison animaton\n  addCompare = (a, b) => {\n    this.state.animations.push({\n      compare: [a, b],\n      animate: (parent) => {\n        parent.animateCompare(a, b);\n      },\n    });\n  };\n\n  // pauses for a certain time, in miliseconds\n  sleep = (time) => {\n    let scaledTime = time * SPD;\n    let date = new Date();\n    let curDate = null;\n    do {\n      curDate = new Date();\n    } while (curDate - date < scaledTime);\n  };\n  // resets the animation array\n  resetAnimation = () => {};\n\n  // checks for bars that are in the right place and change their colour\n  drawInPlace() {\n    let { array, solution } = this.state;\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === solution[i]) {\n        this.changeColour(BAR_COL_CORR, [i]);\n      } else {\n        this.changeColour(BAR_COL_DFLT, [i]);\n      }\n    }\n  }\n  // changes the colour of the bars specified in indices to newColour\n  // default indices is all of the array\n  changeColour = (newColour, indices) => {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    if (indices === undefined) {\n      for (var i = 0; i < bars.length; i++) {\n        bars[i].style.backgroundColor = newColour;\n      }\n    } else {\n      for (var i = 0; i < indices.length; i++) {\n        bars[indices[i]].style.backgroundColor = newColour;\n      }\n    }\n  };\n\n  getColour = (i) => {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    return bars[i].style.backgroundColor;\n  };\n}\nexport default AlgorithmVisualiser;\n","C:\\Users\\Shiqi Lin\\documents\\github\\algo-vis\\src\\main\\ArrayController.jsx",["53"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nclass ArrayController extends React.Component {\n  render() {\n    return (\n      <div className=\"array-controller\">\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onReset}\n            className=\"btn btn-warning btn-sm m-2\"\n            id=\"btn-reset\"\n          >\n            RESET\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort1\"\n          >\n            Sort!\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onBubbleSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort2\"\n          >\n            Bubble Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onMergeSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort3\"\n          >\n            Merge Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTestCss}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-test1\"\n          >\n            MistyRose\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTestCss2}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-test2\"\n          >\n            AliceBlue\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTest}\n            className=\"btn btn-warning btn-sm m-2\"\n            id=\"btn-test3\"\n          >\n            Test MergeSort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <label for=\"array-length\" className=\"form-label\">\n            Array Length\n          </label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"array-length-range\"\n          ></input>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ArrayController;\n",{"ruleId":"54","severity":1,"message":"55","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":26},{"ruleId":"54","severity":1,"message":"58","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":17},{"ruleId":"54","severity":1,"message":"59","line":16,"column":7,"nodeType":"56","messageId":"57","endLine":16,"endColumn":19},{"ruleId":"54","severity":1,"message":"60","line":228,"column":9,"nodeType":"56","messageId":"57","endLine":228,"endColumn":15},{"ruleId":"54","severity":1,"message":"61","line":316,"column":11,"nodeType":"56","messageId":"57","endLine":316,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":411,"column":16,"nodeType":"56","messageId":"64","endLine":411,"endColumn":17},{"ruleId":"54","severity":1,"message":"58","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":17},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":26},{"ruleId":"54","severity":1,"message":"58","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":17},{"ruleId":"54","severity":1,"message":"59","line":16,"column":7,"nodeType":"56","messageId":"57","endLine":16,"endColumn":19},{"ruleId":"54","severity":1,"message":"60","line":228,"column":9,"nodeType":"56","messageId":"57","endLine":228,"endColumn":15},{"ruleId":"54","severity":1,"message":"61","line":316,"column":11,"nodeType":"56","messageId":"57","endLine":316,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":411,"column":16,"nodeType":"56","messageId":"64","endLine":411,"endColumn":17},{"ruleId":"54","severity":1,"message":"58","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":17},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","'BAR_COL_TEST' is assigned a value but never used.","'sorted' is assigned a value but never used.","'array' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-global-assign","no-unsafe-negation"]