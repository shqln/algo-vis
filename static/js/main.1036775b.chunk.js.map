{"version":3,"sources":["main/ArrayController.jsx","main/AlgorithmVisualiser.jsx","App.js","index.js"],"names":["ArrayController","className","onClick","this","props","onReset","id","onSort","onBubbleSort","onMergeSort","onTestCss","onTestCss2","onTest","for","type","React","Component","LEN","DELAY","BAR_COL_DFLT","BAR_COL_SWAP","BAR_COL_COMP","AlgorithmVisualiser","state","array","animations","solution","componentDidMount","resetArray","generateArray","sort","a","b","setState","drawInPlace","i","push","randIntBetween","min","max","Math","floor","random","sortArray","console","log","testCss","changeColour","testCss2","merge","j","m","length","n","result","concat","slice","undefined","mergeSort","arrayCopy","mergeSortInPlace","animate","mergeSort_","mid","left","right","sortedLeft","sortedRight","mergeInPlace","l","r","doCompare","k","doSwap","quickSort","bubbleSort_","swapped","passes","testSorted","bubbleSort","newAnimation","addCompare","delta","addSwap","temp","copy","equalArray","debugSort","sortFn","args","nativeSorted","customSorted","reverse","animate_","pop","setTimeout","animatePointAt","animateSwap","colA","getColour","colB","animateCompare","addPointAt","idx","pointAt","swap","parent","compare","sleep","time","scaledTime","date","Date","curDate","resetAnimation","newColour","indices","bars","document","getElementsByClassName","style","backgroundColor","height","map","num","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1036775b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nclass ArrayController extends React.Component {\n  render() {\n    return (\n      <div className=\"array-controller\">\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onReset}\n            className=\"btn btn-warning btn-sm m-2\"\n            id=\"btn-reset\"\n          >\n            RESET\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort1\"\n          >\n            Sort!\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onBubbleSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort2\"\n          >\n            Bubble Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onMergeSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort3\"\n          >\n            Merge Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTestCss}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-test1\"\n          >\n            MistyRose\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTestCss2}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-test2\"\n          >\n            AliceBlue\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTest}\n            className=\"btn btn-warning btn-sm m-2\"\n            id=\"btn-test3\"\n          >\n            Test MergeSort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <label for=\"array-length\" className=\"form-label\">\n            Array Length\n          </label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"array-length-range\"\n          ></input>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ArrayController;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ArrayController from \"./ArrayController\";\n\n// settings\nconst LEN = 100;\nconst MAX = 500;\nconst MIN = 5;\nconst SPD = 100; // multiplier\nconst DELAY = 1 * (1 / SPD); // ms\n\nconst BAR_COL_DFLT = \"AliceBlue\"; // default colour\nconst BAR_COL_SWAP = \"Orchid\"; // colour when swapping\nconst BAR_COL_COMP = \"LightSalmon\"; // colour when comparing\nconst BAR_COL_CORR = \"SpringGreen\"; // colour when elem is in place\nconst BAR_COL_TEST = \"MistyRose\"; // colour for debugging purpose\n\nclass AlgorithmVisualiser extends React.Component {\n  state = {\n    array: [],\n    animations: [],\n    solution: [],\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ArrayController\n          onReset={this.resetArray}\n          onSort={this.sortArray}\n          onBubbleSort={this.bubbleSort}\n          onMergeSort={this.mergeSort}\n          onTestCss={this.testCss}\n          onTestCss2={this.testCss2}\n          onTest={() =>\n            console.log(this.debugSort(this.mergeSortInPlace, [0, LEN]))\n          }\n        />\n        <div className=\"array-container\">\n          <div\n            className=\"array-container-pillar\"\n            key=\"pillar\"\n            style={{ height: `${MAX}px` }}\n          ></div>\n          {this.state.array.map((num, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ height: `${num}px` }}\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // reset the array when the component is created\n  componentDidMount = () => {\n    this.resetArray();\n  };\n\n  // initialises the array and fill it with random numebers\n  resetArray = () => {\n    const array = this.generateArray();\n    const solution = [...array].sort((a, b) => a - b);\n    this.setState({ array, animations: [], solution });\n    this.drawInPlace();\n  };\n\n  generateArray = () => {\n    const array = [];\n    for (var i = 0; i < LEN; i++) {\n      array.push(this.randIntBetween(MIN, MAX));\n    }\n    return array;\n  };\n\n  // generates an integer between min and max\n  // from stackoverflow\n  //https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n  randIntBetween = (min, max) => {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  // sorts the array ascendingly\n  sortArray = () => {\n    let { array } = this.state;\n    console.log(array);\n    array = array.sort((a, b) => a - b);\n    this.setState({ array });\n    this.drawInPlace();\n  };\n\n  // tests something about the css\n  testCss = () => {\n    this.changeColour(\"MistyRose\");\n  };\n\n  // tests something about the css\n  testCss2 = () => {\n    this.changeColour(BAR_COL_DFLT);\n  };\n\n  /////////////////////////Algorithms////////////////////////////\n\n  // merges two sorted arrays\n  merge = (a, b) => {\n    let i = 0,\n      j = 0,\n      m = a.length,\n      n = b.length,\n      result = [];\n    while (i !== m && j !== n) {\n      if (a[i] > b[j]) {\n        result.push(b[j]);\n        j++;\n      } else {\n        result.push(a[i]);\n        i++;\n      }\n    }\n    if (i !== m) {\n      result = result.concat(a.slice(i, undefined));\n    }\n    if (j !== n) {\n      result = result.concat(b.slice(j, undefined));\n    }\n    return result;\n  };\n\n  // wrapper function for merge sort\n  mergeSort = () => {\n    let { array } = this.state;\n    const arrayCopy = [...array];\n    this.mergeSortInPlace(arrayCopy, 0, arrayCopy.length);\n    this.animate();\n  };\n\n  // sorts an array using merge sort, uses auxiliary array\n  mergeSort_ = (array) => {\n    let n = array.length;\n\n    if (n <= 1) {\n      return array;\n    }\n\n    let mid = Math.floor(n / 2);\n\n    let left = array.slice(undefined, mid),\n      right = array.slice(mid, undefined),\n      sortedLeft = this.mergeSort_(left),\n      sortedRight = this.mergeSort_(right);\n    return this.merge(sortedLeft, sortedRight);\n  };\n\n  // array : [x, x, .....x,| ..... x, x]\n  //         l          mid           r\n  // l, mid and r are INDICES OF THE LAST ELEMENT OF THE TWO SUB ARRAYS\n  // [l...mid] and [mid+1, r] are sorted\n  // [0...l-1] is the merged\n  mergeInPlace = (array, l, mid, r) => {\n    let i = l,\n      j = mid + 1;\n    // console.log(\"merging: \", array.slice(l, mid), array.slice(mid + 1, r + 1));\n    // while there are elems in both unmerged arrays\n    while (i <= mid && j <= r) {\n      // if right is smaller, move all elems from i to j to the right by 1\n      if (this.doCompare(array, i, j, true) === 1) {\n        let k = j;\n        while (k > i) {\n          this.doSwap(array, k, k - 1, true);\n          k--;\n        }\n        // update pointers;\n        mid++;\n        i++;\n        j++;\n      } else {\n        // left < right\n        i++;\n      }\n    }\n    return array;\n  };\n\n  // sorts an array using merge sort, does not use auxiliary array\n  // array : |[x, x, ...... x, x]|\n  //         l                   r\n  mergeSortInPlace = (array, l, r) => {\n    let len = r - l;\n    if (len <= 1) {\n      return array;\n    }\n    let mid = Math.floor((l + r) / 2);\n\n    this.mergeSortInPlace(array, l, mid);\n    this.mergeSortInPlace(array, mid, r);\n\n    return this.mergeInPlace(array, l, mid - 1, r - 1);\n  };\n\n  quickSort = () => {};\n\n  bubbleSort_ = (array) => {\n    let swapped = true;\n    let passes = 0;\n    while (swapped && passes < LEN) {\n      passes++;\n      swapped = false;\n      // for each element, compare with the next\n      for (var i = 0; i < array.length - 1; i++) {\n        let j = i + 1;\n        // if wrong order, swap\n        if (this.doCompare(array, i, j, true) === 1) {\n          this.doSwap(array, i, j, true);\n          swapped = true;\n        }\n      }\n    }\n    if (this.testSorted(array)) {\n    } else {\n    }\n    return array;\n  };\n\n  bubbleSort = () => {\n    let sorted = this.bubbleSort_([...this.state.array]);\n    this.animate();\n  };\n\n  doCompare = (array, i, j, newAnimation) => {\n    if (newAnimation) {\n      this.addCompare(i, j);\n    }\n    let delta = array[i] - array[j];\n    if (delta < 0) {\n      return -1;\n    }\n    if (delta > 0) {\n      return 1;\n    }\n    return 0;\n  };\n\n  // swaps two elements in an array, a b are indices\n  doSwap = (array, i, j, newAnimation) => {\n    if (newAnimation) {\n      this.addSwap(i, j);\n    }\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return array;\n  };\n\n  // checks if the arary is sorted\n  testSorted = (array) => {\n    let copy = [...array];\n    copy.sort((a, b) => a - b);\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] !== copy[i]) {\n        console.log(array[i], \" != \", copy[i], \"at\", i);\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // checks if two arrays contain the exact same things in the same order\n  equalArray = (a, b) => {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // generates 500 arrays based on the setting, see if the arrays sorted by the\n  // native algorithm is the same as sorted by the sortFn\n  debugSort = (sortFn, args) => {\n    const NTEST = 500;\n    for (var i = 0; i < NTEST; i++) {\n      let a = this.generateArray(),\n        b = [...a],\n        nativeSorted = a.sort((a, b) => a - b),\n        customSorted = sortFn(b, ...args);\n      if (this.equalArray(nativeSorted, customSorted)) {\n        console.log(\"sort successful\");\n      } else {\n        return false;\n      }\n    }\n    return true;\n  };\n  /////////////////helpers for visualisation/////////////////////\n  // idea: compute and generate a list of animations before executing the\n  // animations, this way the animations can be played back and even in reverse\n  // format for animation : array of objects each containing one animation\n  // {pointAt: [a], swap: [a, b], compare: [a, b]}\\\n\n  // executes the list of animations\n  animate = () => {\n    let { animations } = this.state;\n    animations.reverse();\n    this.setState({ animations });\n    this.animate_();\n  };\n\n  // recursive\n  animate_ = () => {\n    let { array, animations } = this.state;\n    this.drawInPlace();\n    if (animations.length === 0) {\n      return;\n    }\n    animations.pop().animate(this);\n    setTimeout(() => {\n      this.animate_();\n    }, DELAY);\n  };\n\n  // animation for a pointer\n  animatePointAt = () => {};\n\n  // animation for a swap\n  animateSwap = (a, b) => {\n    let colA = this.getColour(a),\n      colB = this.getColour(b);\n    this.changeColour(BAR_COL_SWAP, [a, b]);\n    this.doSwap(this.state.array, a, b);\n    this.setState(this.state);\n    setTimeout(() => {\n      this.changeColour(colA, [a]);\n      this.changeColour(colB, [b]);\n    }, DELAY);\n  };\n\n  // animation for a comparison\n  animateCompare = (a, b) => {\n    let colA = this.getColour(a),\n      colB = this.getColour(b);\n    this.changeColour(BAR_COL_COMP, [a, b]);\n    setTimeout(() => {\n      this.changeColour(colA, [a]);\n      this.changeColour(colB, [b]);\n    }, DELAY);\n  };\n\n  // adds a pointAt animation\n  addPointAt = (idx) => {\n    this.state.animations.push({ pointAt: [idx] });\n  };\n\n  // adds a swap animation\n  addSwap = (a, b) => {\n    this.state.animations.push({\n      swap: [a, b],\n      animate: (parent) => {\n        parent.animateSwap(a, b);\n      },\n    });\n  };\n\n  // adds a comparison animaton\n  addCompare = (a, b) => {\n    this.state.animations.push({\n      compare: [a, b],\n      animate: (parent) => {\n        parent.animateCompare(a, b);\n      },\n    });\n  };\n\n  // pauses for a certain time, in miliseconds\n  sleep = (time) => {\n    let scaledTime = time * SPD;\n    let date = new Date();\n    let curDate = null;\n    do {\n      curDate = new Date();\n    } while (curDate - date < scaledTime);\n  };\n  // resets the animation array\n  resetAnimation = () => {};\n\n  // checks for bars that are in the right place and change their colour\n  drawInPlace() {\n    let { array, solution } = this.state;\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === solution[i]) {\n        this.changeColour(BAR_COL_CORR, [i]);\n      } else {\n        this.changeColour(BAR_COL_DFLT, [i]);\n      }\n    }\n  }\n  // changes the colour of the bars specified in indices to newColour\n  // default indices is all of the array\n  changeColour = (newColour, indices) => {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    if (indices === undefined) {\n      for (var i = 0; i < bars.length; i++) {\n        bars[i].style.backgroundColor = newColour;\n      }\n    } else {\n      for (var i = 0; i < indices.length; i++) {\n        bars[indices[i]].style.backgroundColor = newColour;\n      }\n    }\n  };\n\n  getColour = (i) => {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    return bars[i].style.backgroundColor;\n  };\n}\nexport default AlgorithmVisualiser;\n","import AlgorithmVisualiser from \"./main/AlgorithmVisualiser\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlgorithmVisualiser className=\"AlgoVis\" />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}