{"version":3,"sources":["main/ArrayController.jsx","main/AlgorithmVisualiser.jsx","App.js","index.js"],"names":["ArrayController","className","onClick","this","props","onReset","id","onSort","onBubbleSort","onMergeSort","onTestCss","onTestCss2","onTest","for","type","min","max","onChange","onChangeLength","React","Component","DELAY","BAR_COL_DFLT","BAR_COL_SWAP","BAR_COL_COMP","AlgorithmVisualiser","state","length","array","animations","solution","componentDidMount","resetArray","handleTest","console","log","window","innerWidth","innerHeight","generateArray","sort","a","b","setState","drawInPlace","setLength","newLen","n","i","push","randIntBetween","Math","floor","random","sortArray","testCss","changeColour","testCss2","merge","j","m","result","concat","slice","undefined","mergeSort","arrayCopy","mergeSortInPlace","animate","mergeSort_","mid","left","right","sortedLeft","sortedRight","mergeInPlace","l","r","doCompare","k","doSwap","quickSort","bubbleSort_","swapped","passes","testSorted","bubbleSort","newAnimation","addCompare","delta","addSwap","temp","copy","equalArray","debugSort","sortFn","args","nativeSorted","customSorted","reverse","animate_","pop","setTimeout","animatePointAt","animateSwap","colA","getColour","colB","animateCompare","addPointAt","idx","pointAt","swap","parent","compare","sleep","time","scaledTime","date","Date","curDate","resetAnimation","newColour","indices","bars","document","getElementsByClassName","style","backgroundColor","handleChangeLength","evnt","parseInt","target","value","height","map","num","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3bc38f1d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nclass ArrayController extends React.Component {\n  render() {\n    return (\n      <div className=\"array-controller\">\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onReset}\n            className=\"btn btn-warning btn-sm m-2\"\n            id=\"btn-reset\"\n          >\n            RESET\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort1\"\n          >\n            Sort!\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onBubbleSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort2\"\n          >\n            Bubble Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onMergeSort}\n            className=\"btn btn-primary btn-sm m-2\"\n            id=\"btn-sort3\"\n          >\n            Merge Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTestCss}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-test1\"\n          >\n            MistyRose\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTestCss2}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-test2\"\n          >\n            AliceBlue\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTest}\n            className=\"btn btn-warning btn-sm m-2\"\n            id=\"btn-test3\"\n          >\n            Test\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <label for=\"array-length\" className=\"form-label\">\n            Array Length\n          </label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            min=\"5\"\n            max=\"200\"\n            id=\"array-length-range\"\n            onChange={this.props.onChangeLength}\n          ></input>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ArrayController;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ArrayController from \"./ArrayController\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// settings\nconst LEN = 100;\nconst MAX = 500;\nconst MIN = 5;\nconst SPD = 100; // multiplier\nconst DELAY = 1 * (1 / SPD); // ms\n\nconst BAR_COL_DFLT = \"AliceBlue\"; // default colour\nconst BAR_COL_SWAP = \"Orchid\"; // colour when swapping\nconst BAR_COL_COMP = \"LightSalmon\"; // colour when comparing\nconst BAR_COL_CORR = \"SpringGreen\"; // colour when elem is in place\nconst BAR_COL_TEST = \"MistyRose\"; // colour for debugging purpose\n\nclass AlgorithmVisualiser extends React.Component {\n  state = {\n    length: LEN,\n    array: [],\n    animations: [],\n    solution: [],\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ArrayController\n          onReset={this.resetArray}\n          onSort={this.sortArray}\n          onBubbleSort={this.bubbleSort}\n          onMergeSort={this.mergeSort}\n          onTestCss={this.testCss}\n          onTestCss2={this.testCss2}\n          onTest={this.handleTest}\n          onChangeLength={this.handleChangeLength}\n        />\n        <div className=\"array-container\">\n          <div\n            className=\"array-container-pillar\"\n            key=\"pillar\"\n            style={{ height: `${MAX}px` }}\n          ></div>\n          {this.state.array.map((num, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ height: `${num}px` }}\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // reset the array when the component is created\n  componentDidMount = () => {\n    this.resetArray();\n  };\n\n  handleTest = () => {\n    console.log(\"w\", window.innerWidth);\n    console.log(\"h\", window.innerHeight);\n  };\n  // initialises the array and fill it with random numebers\n  resetArray = () => {\n    const array = this.generateArray();\n    const solution = [...array].sort((a, b) => a - b);\n    this.setState({ array, animations: [], solution });\n    this.drawInPlace();\n    this.setState({ array, animations: [], solution });\n    this.drawInPlace();\n  };\n\n  setLength = (newLen) => {\n    this.state.length = newLen;\n    this.setState(this.state);\n  };\n\n  generateArray = () => {\n    const array = [];\n    let n = this.state.length;\n    for (var i = 0; i < n; i++) {\n      array.push(this.randIntBetween(MIN, MAX));\n    }\n    return array;\n  };\n\n  // generates an integer between min and max\n  // from stackoverflow\n  //https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n  randIntBetween = (min, max) => {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  // sorts the array ascendingly\n  sortArray = () => {\n    let { array } = this.state;\n    console.log(array);\n    array = array.sort((a, b) => a - b);\n    this.setState({ array });\n    this.drawInPlace();\n  };\n\n  // tests something about the css\n  testCss = () => {\n    this.changeColour(\"MistyRose\");\n  };\n\n  // tests something about the css\n  testCss2 = () => {\n    this.changeColour(BAR_COL_DFLT);\n  };\n\n  /////////////////////////Algorithms////////////////////////////\n\n  // merges two sorted arrays\n  merge = (a, b) => {\n    let i = 0,\n      j = 0,\n      m = a.length,\n      n = b.length,\n      result = [];\n    while (i !== m && j !== n) {\n      if (a[i] > b[j]) {\n        result.push(b[j]);\n        j++;\n      } else {\n        result.push(a[i]);\n        i++;\n      }\n    }\n    if (i !== m) {\n      result = result.concat(a.slice(i, undefined));\n    }\n    if (j !== n) {\n      result = result.concat(b.slice(j, undefined));\n    }\n    return result;\n  };\n\n  // wrapper function for merge sort\n  mergeSort = () => {\n    let { array } = this.state;\n    const arrayCopy = [...array];\n    this.mergeSortInPlace(arrayCopy, 0, arrayCopy.length);\n    this.animate();\n  };\n\n  // sorts an array using merge sort, uses auxiliary array\n  mergeSort_ = (array) => {\n    let n = array.length;\n\n    if (n <= 1) {\n      return array;\n    }\n\n    let mid = Math.floor(n / 2);\n\n    let left = array.slice(undefined, mid),\n      right = array.slice(mid, undefined),\n      sortedLeft = this.mergeSort_(left),\n      sortedRight = this.mergeSort_(right);\n    return this.merge(sortedLeft, sortedRight);\n  };\n\n  // array : [x, x, .....x,| ..... x, x]\n  //         l          mid           r\n  // l, mid and r are INDICES OF THE LAST ELEMENT OF THE TWO SUB ARRAYS\n  // [l...mid] and [mid+1, r] are sorted\n  // [0...l-1] is the merged\n  mergeInPlace = (array, l, mid, r) => {\n    let i = l,\n      j = mid + 1;\n    // console.log(\"merging: \", array.slice(l, mid), array.slice(mid + 1, r + 1));\n    // while there are elems in both unmerged arrays\n    while (i <= mid && j <= r) {\n      // if right is smaller, move all elems from i to j to the right by 1\n      if (this.doCompare(array, i, j, true) === 1) {\n        let k = j;\n        while (k > i) {\n          this.doSwap(array, k, k - 1, true);\n          k--;\n        }\n        // update pointers;\n        mid++;\n        i++;\n        j++;\n      } else {\n        // left < right\n        i++;\n      }\n    }\n    return array;\n  };\n\n  // sorts an array using merge sort, does not use auxiliary array\n  // array : |[x, x, ...... x, x]|\n  //         l                   r\n  mergeSortInPlace = (array, l, r) => {\n    let len = r - l;\n    if (len <= 1) {\n      return array;\n    }\n    let mid = Math.floor((l + r) / 2);\n\n    this.mergeSortInPlace(array, l, mid);\n    this.mergeSortInPlace(array, mid, r);\n\n    return this.mergeInPlace(array, l, mid - 1, r - 1);\n  };\n\n  quickSort = () => {};\n\n  bubbleSort_ = (array) => {\n    let swapped = true;\n    let passes = 0;\n    let n = this.state.length;\n    while (swapped && passes < n) {\n      passes++;\n      swapped = false;\n      // for each element, compare with the next\n      for (var i = 0; i < array.length - 1; i++) {\n        let j = i + 1;\n        // if wrong order, swap\n        if (this.doCompare(array, i, j, true) === 1) {\n          this.doSwap(array, i, j, true);\n          swapped = true;\n        }\n      }\n    }\n    if (this.testSorted(array)) {\n    } else {\n    }\n    return array;\n  };\n\n  bubbleSort = () => {\n    let sorted = this.bubbleSort_([...this.state.array]);\n    this.animate();\n  };\n\n  doCompare = (array, i, j, newAnimation) => {\n    if (newAnimation) {\n      this.addCompare(i, j);\n    }\n    let delta = array[i] - array[j];\n    if (delta < 0) {\n      return -1;\n    }\n    if (delta > 0) {\n      return 1;\n    }\n    return 0;\n  };\n\n  // swaps two elements in an array, a b are indices\n  doSwap = (array, i, j, newAnimation) => {\n    if (newAnimation) {\n      this.addSwap(i, j);\n    }\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return array;\n  };\n\n  // checks if the arary is sorted\n  testSorted = (array) => {\n    let copy = [...array];\n    copy.sort((a, b) => a - b);\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] !== copy[i]) {\n        console.log(array[i], \" != \", copy[i], \"at\", i);\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // checks if two arrays contain the exact same things in the same order\n  equalArray = (a, b) => {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // generates 500 arrays based on the setting, see if the arrays sorted by the\n  // native algorithm is the same as sorted by the sortFn\n  debugSort = (sortFn, args) => {\n    const NTEST = 500;\n    for (var i = 0; i < NTEST; i++) {\n      let a = this.generateArray(),\n        b = [...a],\n        nativeSorted = a.sort((a, b) => a - b),\n        customSorted = sortFn(b, ...args);\n      if (this.equalArray(nativeSorted, customSorted)) {\n        console.log(\"sort successful\");\n      } else {\n        return false;\n      }\n    }\n    return true;\n  };\n  /////////////////helpers for visualisation/////////////////////\n  // idea: compute and generate a list of animations before executing the\n  // animations, this way the animations can be played back and even in reverse\n  // format for animation : array of objects each containing one animation\n  // {pointAt: [a], swap: [a, b], compare: [a, b]}\\\n\n  // executes the list of animations\n  animate = () => {\n    let { animations } = this.state;\n    animations.reverse();\n    this.setState({ animations });\n    this.animate_();\n  };\n\n  // recursive\n  animate_ = () => {\n    let { array, animations } = this.state;\n    this.drawInPlace();\n    if (animations.length === 0) {\n      return;\n    }\n    animations.pop().animate(this);\n    setTimeout(() => {\n      this.animate_();\n    }, DELAY);\n  };\n\n  // animation for a pointer\n  animatePointAt = () => {};\n\n  // animation for a swap\n  animateSwap = (a, b) => {\n    let colA = this.getColour(a),\n      colB = this.getColour(b);\n    this.changeColour(BAR_COL_SWAP, [a, b]);\n    this.doSwap(this.state.array, a, b);\n    this.setState(this.state);\n    setTimeout(() => {\n      this.changeColour(colA, [a]);\n      this.changeColour(colB, [b]);\n    }, DELAY);\n  };\n\n  // animation for a comparison\n  animateCompare = (a, b) => {\n    let colA = this.getColour(a),\n      colB = this.getColour(b);\n    this.changeColour(BAR_COL_COMP, [a, b]);\n    setTimeout(() => {\n      this.changeColour(colA, [a]);\n      this.changeColour(colB, [b]);\n    }, DELAY);\n  };\n\n  // adds a pointAt animation\n  addPointAt = (idx) => {\n    this.state.animations.push({ pointAt: [idx] });\n  };\n\n  // adds a swap animation\n  addSwap = (a, b) => {\n    this.state.animations.push({\n      swap: [a, b],\n      animate: (parent) => {\n        parent.animateSwap(a, b);\n      },\n    });\n  };\n\n  // adds a comparison animaton\n  addCompare = (a, b) => {\n    this.state.animations.push({\n      compare: [a, b],\n      animate: (parent) => {\n        parent.animateCompare(a, b);\n      },\n    });\n  };\n\n  // pauses for a certain time, in miliseconds\n  sleep = (time) => {\n    let scaledTime = time * SPD;\n    let date = new Date();\n    let curDate = null;\n    do {\n      curDate = new Date();\n    } while (curDate - date < scaledTime);\n  };\n  // resets the animation array\n  resetAnimation = () => {};\n\n  // checks for bars that are in the right place and change their colour\n  drawInPlace() {\n    let { array, solution } = this.state;\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === solution[i]) {\n        this.changeColour(BAR_COL_CORR, [i]);\n      } else {\n        this.changeColour(BAR_COL_DFLT, [i]);\n      }\n    }\n  }\n  // changes the colour of the bars specified in indices to newColour\n  // default indices is all of the array\n  changeColour = (newColour, indices) => {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    if (indices === undefined) {\n      for (var i = 0; i < bars.length; i++) {\n        bars[i].style.backgroundColor = newColour;\n      }\n    } else {\n      for (var i = 0; i < indices.length; i++) {\n        bars[indices[i]].style.backgroundColor = newColour;\n      }\n    }\n  };\n\n  getColour = (i) => {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    return bars[i].style.backgroundColor;\n  };\n\n  handleChangeLength = (evnt) => {\n    let newLen = parseInt(evnt.target.value);\n    this.setLength(newLen);\n    this.resetArray();\n  };\n}\nexport default AlgorithmVisualiser;\n","import AlgorithmVisualiser from \"./main/AlgorithmVisualiser\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlgorithmVisualiser className=\"AlgoVis\" />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}