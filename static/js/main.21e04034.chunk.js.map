{"version":3,"sources":["main/ArrayController.jsx","main/AlgorithmVisualiser.jsx","App.js","index.js"],"names":["ArrayController","className","onClick","this","props","onReset","id","onSort","onBubbleSort","onMergeSort","onSelectionSort","onQuickSort","onTestCss2","onTest","for","type","min","start","max","onChange","onChangeLength","React","Component","LEN","SPD","BAR_COL_DFLT","BAR_COL_SWAP","BAR_COL_COMP","AlgorithmVisualiser","state","length","barWidth","array","animations","solution","componentDidMount","setLength","resetArray","handleTest","debugSort","selectionSort_","generateArray","sort","a","b","setState","drawInPlace","newLen","setWidth","newLength","undefined","w","Math","floor","n","i","push","randIntBetween","random","sortArray","testCss","changeColour","testCss2","merge","j","m","result","concat","slice","mergeSort","arrayCopy","mergeSortInPlace","animate","mergeSort_","mid","left","right","sortedLeft","sortedRight","mergeInPlace","l","r","doCompare","k","doSwap","quickSort","quickSort_","lo","hi","pivot","partition","bubbleSort_","swapped","passes","testSorted","bubbleSort","minIdx","selectionSort","newAnimation","addCompare","delta","addSwap","temp","copy","console","log","equalArray","sortFn","args","nativeSorted","customSorted","reverse","animate_","pop","setTimeout","animatePointAt","animateSwap","colA","getColour","colB","animateCompare","addPointAt","idx","pointAt","swap","parent","compare","sleep","time","scaledTime","date","Date","curDate","resetAnimation","newColour","indices","bars","document","getElementsByClassName","style","backgroundColor","handleChangeLength","evnt","parseInt","target","value","onTestCss","height","map","num","width","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21e04034.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nclass ArrayController extends React.Component {\n  render() {\n    return (\n      <div className=\"array-controller\">\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onReset}\n            className=\"btn btn-warning btn-sm m-2\"\n            id=\"btn-reset\"\n          >\n            RESET\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onSort}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-sort1\"\n          >\n            Sort!\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onBubbleSort}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-sort2\"\n          >\n            Bubble Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onMergeSort}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-sort3\"\n          >\n            Merge Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onSelectionSort}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-sort4\"\n          >\n            Selection Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onQuickSort}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-sort5\"\n          >\n            Quick Sort\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTestCss2}\n            className=\"btn btn-info btn-sm m-2\"\n            id=\"btn-test2\"\n          >\n            AliceBlue\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <button\n            onClick={this.props.onTest}\n            className=\"btn btn-warning btn-sm m-2\"\n            id=\"btn-test3\"\n          >\n            Test\n          </button>\n        </div>\n        <div className=\"array-controller-options\">\n          <label for=\"array-length\" className=\"form-label\">\n            Array Length\n          </label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            min=\"5\"\n            start=\"100\"\n            max=\"200\"\n            id=\"array-length-range\"\n            onChange={this.props.onChangeLength}\n          ></input>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ArrayController;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ArrayController from \"./ArrayController\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// settings\nconst LEN = 100;\nconst MAX = 500;\nconst MIN = 5;\nconst SPD = 1000; // multiplier\nconst DELAY = 1000 / SPD; // ms\nconst BAR_CONTAINER_W = 1000; // px\nconst MARGIN = 4; // px\n\nconst BAR_COL_DFLT = \"AliceBlue\"; // default colour\nconst BAR_COL_SWAP = \"Orchid\"; // colour when swapping\nconst BAR_COL_COMP = \"LightSalmon\"; // colour when comparing\nconst BAR_COL_CORR = \"SpringGreen\"; // colour when elem is in place\nconst BAR_COL_TEST = \"MistyRose\"; // colour for debugging purpose\n\nclass AlgorithmVisualiser extends React.Component {\n  state = {\n    length: LEN,\n    barWidth: 1,\n    array: [],\n    animations: [],\n    solution: [],\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ArrayController\n          onReset={this.resetArray}\n          onSort={this.sortArray}\n          onBubbleSort={this.bubbleSort}\n          onMergeSort={this.mergeSort}\n          onSelectionSort={this.selectionSort}\n          onQuickSort={this.quickSort}\n          onTestCss={this.testCss}\n          onTestCss2={this.testCss2}\n          onTest={this.handleTest}\n          onChangeLength={this.handleChangeLength}\n        />\n        <div className=\"array-container\">\n          <div\n            className=\"array-container-pillar\"\n            key=\"pillar\"\n            style={{ height: `${MAX}px` }}\n          ></div>\n          {this.state.array.map((num, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                height: `${num}px`,\n                width: `${this.state.barWidth}px`,\n              }}\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // reset the array when the component is created\n  componentDidMount = () => {\n    this.setLength(LEN);\n    this.resetArray();\n  };\n\n  handleTest = () => {\n    // console.log(\"w\", window.innerWidth);\n    // console.log(\"h\", window.innerHeight);\n    // console.log(\n    //   \"container\",\n    //   document.getElementsByClassName(\"array-container\")\n    // );\n    this.debugSort(this.selectionSort_);\n  };\n  // initialises the array and fill it with random numebers\n  resetArray = () => {\n    const array = this.generateArray();\n    const solution = [...array].sort((a, b) => a - b);\n    this.setState({ array, animations: [], solution }, () => {\n      this.drawInPlace();\n    });\n    // let debug1 = this.state.array,\n    //   debug2 = this.state.solution;\n    // console.log(\"state array:\", debug1, \"state solution: \", debug2);\n  };\n\n  setLength = (newLen) => {\n    this.state.length = newLen;\n    this.setState(this.state);\n    this.setWidth(newLen);\n  };\n\n  // only called when length is changed\n  setWidth = (newLength) => {\n    if (newLength === undefined) {\n      newLength = this.state.length;\n    }\n    let w = Math.floor(BAR_CONTAINER_W / newLength) - MARGIN;\n    this.setState({ barWidth: w > 1 ? w : 1 });\n  };\n\n  generateArray = () => {\n    const array = [];\n    let n = this.state.length;\n    for (var i = 0; i < n; i++) {\n      array.push(this.randIntBetween(MIN, MAX));\n    }\n    return array;\n  };\n\n  // generates an integer between min and max\n  // from stackoverflow\n  //https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n  randIntBetween = (min, max) => {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  // sorts the array ascendingly\n  sortArray = () => {\n    let { array } = this.state;\n    array = array.sort((a, b) => a - b);\n    this.setState({ array }, () => {\n      this.drawInPlace();\n    });\n  };\n\n  // tests something about the css\n  testCss = () => {\n    this.changeColour(\"MistyRose\");\n  };\n\n  // tests something about the css\n  testCss2 = () => {\n    this.changeColour(BAR_COL_DFLT);\n  };\n\n  /////////////////////////Algorithms////////////////////////////\n\n  // merges two sorted arrays\n  merge = (a, b) => {\n    let i = 0,\n      j = 0,\n      m = a.length,\n      n = b.length,\n      result = [];\n    while (i !== m && j !== n) {\n      if (a[i] > b[j]) {\n        result.push(b[j]);\n        j++;\n      } else {\n        result.push(a[i]);\n        i++;\n      }\n    }\n    if (i !== m) {\n      result = result.concat(a.slice(i, undefined));\n    }\n    if (j !== n) {\n      result = result.concat(b.slice(j, undefined));\n    }\n    return result;\n  };\n\n  // wrapper function for merge sort\n  mergeSort = () => {\n    let { array } = this.state;\n    const arrayCopy = [...array];\n    this.mergeSortInPlace(arrayCopy, 0, arrayCopy.length);\n    this.animate();\n  };\n\n  // sorts an array using merge sort, uses auxiliary array\n  mergeSort_ = (array) => {\n    let n = array.length;\n\n    if (n <= 1) {\n      return array;\n    }\n\n    let mid = Math.floor(n / 2);\n\n    let left = array.slice(undefined, mid),\n      right = array.slice(mid, undefined),\n      sortedLeft = this.mergeSort_(left),\n      sortedRight = this.mergeSort_(right);\n    return this.merge(sortedLeft, sortedRight);\n  };\n\n  // array : [x, x, .....x,| ..... x, x]\n  //         l          mid           r\n  // l, mid and r are INDICES OF THE LAST ELEMENT OF THE TWO SUB ARRAYS\n  // [l...mid] and [mid+1, r] are sorted\n  // [0...l-1] is the merged\n  mergeInPlace = (array, l, mid, r) => {\n    let i = l,\n      j = mid + 1;\n    // console.log(\"merging: \", array.slice(l, mid), array.slice(mid + 1, r + 1));\n    // while there are elems in both unmerged arrays\n    while (i <= mid && j <= r) {\n      // if right is smaller, move all elems from i to j to the right by 1\n      if (this.doCompare(array, i, j, true) === 1) {\n        let k = j;\n        while (k > i) {\n          this.doSwap(array, k, k - 1, true);\n          k--;\n        }\n        // update pointers;\n        mid++;\n        i++;\n        j++;\n      } else {\n        // left < right\n        i++;\n      }\n    }\n    return array;\n  };\n\n  // sorts an array using merge sort, does not use auxiliary array\n  // array : |[x, x, ...... x, x]|\n  //         l                   r\n  mergeSortInPlace = (array, l, r) => {\n    let len = r - l;\n    if (len <= 1) {\n      return array;\n    }\n    let mid = Math.floor((l + r) / 2);\n\n    this.mergeSortInPlace(array, l, mid);\n    this.mergeSortInPlace(array, mid, r);\n\n    return this.mergeInPlace(array, l, mid - 1, r - 1);\n  };\n\n  quickSort = () => {\n    let { array } = this.state;\n    this.quickSort_([...array], 0, array.length - 1);\n    this.animate();\n  };\n\n  quickSort_ = (array, lo, hi) => {\n    if (hi > lo) {\n      let pivot = this.partition(array, lo, hi);\n      this.quickSort_(array, lo, pivot - 1);\n      this.quickSort_(array, pivot + 1, hi);\n    }\n    return array;\n  };\n\n  partition = (array, lo, hi) => {\n    let pivot = hi;\n    let i = lo - 1;\n    for (var j = lo; j < hi; j++) {\n      if (this.doCompare(array, j, pivot, true) === -1) {\n        i++;\n        this.doSwap(array, i, j, true);\n      }\n    }\n    this.doSwap(array, i + 1, pivot, true);\n    return i + 1;\n  };\n\n  bubbleSort_ = (array) => {\n    let swapped = true;\n    let passes = 0;\n    let n = this.state.length;\n    while (swapped && passes < n) {\n      passes++;\n      swapped = false;\n      // for each element, compare with the next\n      for (var i = 0; i < array.length - 1; i++) {\n        let j = i + 1;\n        // if wrong order, swap\n        if (this.doCompare(array, i, j, true) === 1) {\n          this.doSwap(array, i, j, true);\n          swapped = true;\n        }\n      }\n    }\n    if (this.testSorted(array)) {\n    } else {\n    }\n    return array;\n  };\n\n  bubbleSort = () => {\n    let sorted = this.bubbleSort_([...this.state.array]);\n    this.animate();\n  };\n\n  // TODO selectionSort\n  selectionSort_ = (array) => {\n    for (var i = 0; i < array.length - 1; i++) {\n      let minIdx = i;\n      for (var k = i; k < array.length; k++) {\n        if (this.doCompare(array, minIdx, k, true) === 1) {\n          minIdx = k;\n        }\n      }\n      this.doSwap(array, i, minIdx, true);\n    }\n    return array;\n  };\n\n  selectionSort = () => {\n    this.selectionSort_([...this.state.array]);\n    this.animate();\n  };\n\n  doCompare = (array, i, j, newAnimation) => {\n    if (newAnimation) {\n      this.addCompare(i, j);\n    }\n    let delta = array[i] - array[j];\n    if (delta < 0) {\n      return -1;\n    }\n    if (delta > 0) {\n      return 1;\n    }\n    return 0;\n  };\n\n  // swaps two elements in an array, a b are indices\n  doSwap = (array, i, j, newAnimation) => {\n    if (newAnimation) {\n      this.addSwap(i, j);\n    }\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return array;\n  };\n\n  // checks if the arary is sorted\n  testSorted = (array) => {\n    let copy = [...array];\n    copy.sort((a, b) => a - b);\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] !== copy[i]) {\n        console.log(array[i], \" != \", copy[i], \"at\", i);\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // checks if two arrays contain the exact same things in the same order\n  equalArray = (a, b) => {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // generates 500 arrays based on the setting, see if the arrays sorted by the\n  // native algorithm is the same as sorted by the sortFn\n  debugSort = (sortFn, args) => {\n    const NTEST = 500;\n    for (var i = 0; i < NTEST; i++) {\n      let a = this.generateArray(),\n        b = [...a],\n        nativeSorted = a.sort((a, b) => a - b),\n        customSorted = undefined;\n      if (args === undefined) {\n        customSorted = sortFn(b);\n      } else {\n        customSorted = sortFn(b, ...args);\n      }\n      if (this.equalArray(nativeSorted, customSorted)) {\n        console.log(\"sort successful\");\n      } else {\n        return false;\n      }\n    }\n    return true;\n  };\n  /////////////////helpers for visualisation/////////////////////\n  // idea: compute and generate a list of animations before executing the\n  // animations, this way the animations can be played back and even in reverse\n  // format for animation : array of objects each containing one animation\n  // {pointAt: [a], swap: [a, b], compare: [a, b]}\\\n\n  // executes the list of animations\n  animate = () => {\n    let { animations } = this.state;\n    animations.reverse();\n    this.setState({ animations }, () => {\n      this.animate_();\n    });\n  };\n\n  // recursive\n  animate_ = () => {\n    let { array, animations } = this.state;\n    this.drawInPlace();\n    if (animations.length === 0) {\n      return;\n    }\n    animations.pop().animate(this);\n    setTimeout(() => {\n      this.animate_();\n    }, DELAY);\n  };\n\n  // animation for a pointer\n  animatePointAt = () => {};\n\n  // animation for a swap\n  animateSwap = (a, b) => {\n    let colA = this.getColour(a),\n      colB = this.getColour(b);\n    this.changeColour(BAR_COL_SWAP, [a, b]);\n    this.doSwap(this.state.array, a, b);\n    this.setState(this.state, () => {\n      setTimeout(() => {\n        this.changeColour(colA, [a]);\n        this.changeColour(colB, [b]);\n      }, DELAY);\n    });\n  };\n\n  // animation for a comparison\n  animateCompare = (a, b) => {\n    let colA = this.getColour(a),\n      colB = this.getColour(b);\n    this.changeColour(BAR_COL_COMP, [a, b]);\n    setTimeout(() => {\n      this.changeColour(colA, [a]);\n      this.changeColour(colB, [b]);\n    }, DELAY);\n  };\n\n  // adds a pointAt animation\n  addPointAt = (idx) => {\n    this.state.animations.push({ pointAt: [idx] });\n  };\n\n  // adds a swap animation\n  addSwap = (a, b) => {\n    this.state.animations.push({\n      swap: [a, b],\n      animate: (parent) => {\n        parent.animateSwap(a, b);\n      },\n    });\n  };\n\n  // adds a comparison animaton\n  addCompare = (a, b) => {\n    this.state.animations.push({\n      compare: [a, b],\n      animate: (parent) => {\n        parent.animateCompare(a, b);\n      },\n    });\n  };\n\n  // pauses for a certain time, in miliseconds\n  sleep = (time) => {\n    let scaledTime = time * SPD;\n    let date = new Date();\n    let curDate = null;\n    do {\n      curDate = new Date();\n    } while (curDate - date < scaledTime);\n  };\n  // resets the animation array\n  resetAnimation = () => {};\n\n  // checks for bars that are in the right place and change their colour\n  drawInPlace() {\n    let { array, solution } = this.state;\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === solution[i]) {\n        this.changeColour(BAR_COL_CORR, [i]);\n      } else {\n        this.changeColour(BAR_COL_DFLT, [i]);\n      }\n    }\n  }\n  // changes the colour of the bars specified in indices to newColour\n  // default indices is all of the array\n  changeColour = (newColour, indices) => {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    if (indices === undefined) {\n      for (var i = 0; i < bars.length; i++) {\n        bars[i].style.backgroundColor = newColour;\n      }\n    } else {\n      for (var i = 0; i < indices.length; i++) {\n        bars[indices[i]].style.backgroundColor = newColour;\n      }\n    }\n  };\n\n  getColour = (i) => {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    return bars[i].style.backgroundColor;\n  };\n\n  handleChangeLength = (evnt) => {\n    let newLen = parseInt(evnt.target.value);\n    this.setLength(newLen);\n    this.resetArray();\n  };\n}\nexport default AlgorithmVisualiser;\n","import AlgorithmVisualiser from \"./main/AlgorithmVisualiser\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlgorithmVisualiser className=\"AlgoVis\" />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}